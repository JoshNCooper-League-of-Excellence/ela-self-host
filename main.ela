import fmt::*;
import interned::*;
import fs::*;
import ast::*;
import error::*;
import lexer::*;
import type::*;

main :: fn() {
  mut args := Env::args();
  mut filename: str;
  if args.length >= 2 {
    filename = args[1];
  } else {
    filename = "ela_source/main.ela";
  }

  printf("%s\n"c, filename.data);
  printlnf("compiling \033[1;3;32m\"%\"", (filename,));

  mut state := State::from_file(filename);
  mut lexer := Lexer::new();
  lexer.push_state(state);

  while !lexer.peek().is_type(TType::Eof) {
    lexer.eat();
  }

  type := global_create_type(
    TypeTag::Scalar,
    InternedString::new(String::from("s32")),
    ScalarTypeInfo.{
      tag: ScalarTag::S32,
      size: 4,
      is_integral: true,
    },
    List!<TypeModifier>::init(.[
      TypeModifier::ptr_const(),
    ]),
    null,
  );
  
  print("\033[0m");
  println(*type);
}