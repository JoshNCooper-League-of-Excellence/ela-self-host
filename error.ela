import lexer::*;
import fmt::*;
import math::clamp;

throw_error :: fn!<T>(msg: T, location: SourceLocation) where T: AsByteSlice {
  mut builder: StringBuilder;
  builder.append("\n\033[1;31mat:\n\t\033[1;34m");
  location.format(&mut builder, FormatOptions::default());
  builder.append("\033[0m\n");
  builder.appendf("\033[1;3;31merror: %", (msg,), FormatOptions::default());
  builder.append("\033[0m\n");

  filename := (*SourceLocation::files())[location.file];
  mut file_data := File::read_all(filename).unwrap();

  defer {
    builder.deinit();
    file_data.deinit();
  }

  line := location.line as s32;
  clamped_begin := clamp(line - 3, line - 3, line) as s32;
  clamped_end := clamp(line + 3, line, line + 3) as s32;

  mut lines : Slice!<String> = 
    file_data
      .split('\n')
      .as_slice(clamped_begin..clamped_end);

  defer {
    for line in lines {
      line.deinit();
    }
  }
  
  builder.append("\033[1;3;37m\n");
  for i in 0..lines.length {
    line : str = .{
      data: lines[i].data as *mut u8,
      length: lines[i].length,
    };

    builder.appendf("%\n", (line,), FormatOptions::default());

    if i == 2 {
      for i in 1..location.column-1 {
        builder.append(" ");
      }
      for i in 0..3 {
        builder.append("^");
      }
      builder.append("\n");
    }
  }

  panic(builder.get_string().as_str());
}