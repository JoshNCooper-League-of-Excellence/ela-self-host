import core::*;
import type::*;
import ast::*;

enum Mutable {
  No,
  Yes,
}

enum SymbolTag {
  Variable,
  Function,
  Type,
  GenericTemplate,
}

struct SymVariable {
  type: Type,
  mutable: Mutable,
  declaring_node: *mut Node,
}

struct SymFunction {
  type: Type,
  declaring_node: *mut Node,
}

struct SymType {
  type: Type,
  declaring_node: *mut Node,
}

struct SymGenericTemplate {
  template: Type,
  declaring_node: *mut Node,
}

struct Sym {
  parent: *mut Scope,
  tag: SymbolTag,
  #anon :: union {
    variable: SymVariable,
    function: SymFunction,
    type: SymType,
    generic_template: SymGenericTemplate,
  }
}

struct Scope {
  name: InternedString,
  symbols: Map!<InternedString, Sym>,
}