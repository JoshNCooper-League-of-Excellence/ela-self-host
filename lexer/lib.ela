#include "../core.ela";

TType :: enum {
  Eof = -1,
  Identifier,
  Integer,
  Float,
  String,
  Char,

  Assign,
  Add,
  Sub,
  Mul,
  Div,
  Modulo,
  Range,
  Arrow,
  Comma,
  Semi,

  Not,
  LogicalNot,
  Or,
  And,
  SHL,
  SHR,
  Xor,
  LogicalOr,
  LogicalAnd,
  LT,
  GT,
  EQ,
  NEQ,
  LE,
  GE,
  LParen,
  RParen,
  LCurly,
  RCurly,
  LBrace,
  RBrace,
  DoubleColon,
  Dot,

  Increment,
  Decrement,

  Return,
  Break,
  Continue,
  For,
  While,
  If,
  Else,

  CompAdd,
  CompSub,
  CompMul,
  CompDiv,
  CompMod,
  CompAnd,
  CompOr,
  CompXor,
  CompSHL,
  CompSHR,

  True,
  False,
  Null,
  Varargs,
  Directive,   // #
  ColonEquals, //  :=

  Struct,
  Enum,
  Union,

  Then,
  Colon,
  In,

  Switch,
  Fn,

  GenericBrace,   // '!<' for ![T, T1]
  As,             // 'as' for casting
  ExpressionBody, // => for expr body, implicit return expr where a block was otherwise expected.
  Defer,

  Impl,      // impl
  Interface, // interface
  Where,

  Size_Of,
  Type_Of,

  Alias,
  Import,
  Module,

  Attribute,

  Mut,
  Const
}

init_ttype_lut :: fn() -> Map!<u64, str> {
  type := typeof(TType);
  mut lut: Map!<u64, str>;
  for field in type.fields {
    lut.insert(field.enum_value, field.name);
  }
  return lut;
}

ttype_to_string :: fn(type: TType) -> str {
  #static mut lut: *mut Map!<u64, str>;
  if !lut {
    lut = new(init_ttype_lut());
  }
  return lut.get(type).unwrap();
}

SourceLocation :: struct {
  line: u64,
  column: u64,
  file: u64,
}

impl SourceLocation {
  #static files :: fn() -> *mut List!<String> {
    #static mut files: List!<String>;
    return &mut files;
  }

  to_string :: fn(self) -> String {
    files := SourceLocation::files();
    filename := (*files)[self.file];
    return format("%:%:%", (filename, self.line, self.column), FormatOptions::default());
  }
}

impl Format for SourceLocation {
  format :: fn(*const self, builder: *mut StringBuilder, mut options: FormatOptions) {
    builder.append_then_free(self.to_string());
  }
}

Token :: struct {
  value: InternedString,
  type: TType,
  location: SourceLocation,
}

impl Token {
  is_relational :: fn(self) -> bool{
    return switch self.type {
      TType::LT => true,
      TType::GT => true,
      TType::EQ => true,
      TType::NEQ => true,
      TType::LE => true,
      TType::GE => true,
      TType::LogicalOr => true,
      TType::LogicalAnd => true,
      else => false,
    }
  }

  is_comp_assign :: fn(self) -> bool  {
    return self.type == TType::CompAdd || self.type == TType::CompSub || self.type == TType::CompMul || self.type == TType::CompDiv ||
           self.type == TType::CompMod || self.type == TType::CompAnd || self.type == TType::CompOr || self.type == TType::CompXor ||
           self.type == TType::CompSHL || self.type == TType::CompSHR;
  }

  Eof :: fn() -> Token {
    #static eof: Token = .{
      type: TType::Eof,
    };
    return eof;
  }

  is_type :: fn(self, type: TType) -> bool {
    return self.type == type;
  }

  is_eof :: fn(self) -> bool {
    return self.type == TType::Eof;
  }

  new :: fn(location: SourceLocation, value: String, type: TType) -> Token {
    return .{
      value: InternedString::new(value),
      type: type,
      location: location,
    };
  }
};

impl Format for Token {
  format :: fn(*const self, builder: *mut StringBuilder, mut options: FormatOptions) {
    builder.append("Token {\n  location: ");
    builder.append_then_free(self.location.to_string());
    mut value: Option!<String>;
    if self.value.data {
      value = Some(*self.value.data);
    } else {
      value = None();
    }
    old := options.quote_strings;
    options.quote_strings = true;
    builder.appendf("\n  type: %,\n  value: %\n}", (self.type, value), options);
    options.quote_strings = old;
  }
}

impl Token {
  to_string :: fn(self) -> String {
    mut builder: StringBuilder;
    defer builder.deinit();
    self.format(&mut builder, FormatOptions::default());
    return builder.get_string();
  }
}

init_operator_and_keyword_maps :: fn(operators: *mut Map!<str, TType>, keywords: *mut Map!<str, TType>) {
  keywords.insert("const", TType::Const);
  keywords.insert("mut", TType::Mut);
  keywords.insert("module", TType::Module);
  keywords.insert("import", TType::Import);
  keywords.insert("alias", TType::Alias);
  keywords.insert("in", TType::In);
  keywords.insert("where", TType::Where);
  keywords.insert("sizeof", TType::Size_Of);
  keywords.insert("typeof", TType::Type_Of);
  keywords.insert("fn", TType::Fn);
  keywords.insert("switch", TType::Switch);
  keywords.insert("then", TType::Then);
  keywords.insert("return", TType::Return);
  keywords.insert("break", TType::Break);
  keywords.insert("continue", TType::Continue);
  keywords.insert("for", TType::For);
  keywords.insert("while", TType::While);
  keywords.insert("if", TType::If);
  keywords.insert("else", TType::Else);
  keywords.insert("struct", TType::Struct);
  keywords.insert("union", TType::Union);
  keywords.insert("enum", TType::Enum);
  keywords.insert("true", TType::True);
  keywords.insert("false", TType::False);
  keywords.insert("null", TType::Null);
  keywords.insert("as", TType::As);
  keywords.insert("impl", TType::Impl);
  keywords.insert("defer", TType::Defer);
  keywords.insert("interface", TType::Interface);

  operators.insert("=>", TType::ExpressionBody);
  operators.insert(":", TType::Colon);
  operators.insert("@", TType::Attribute);
  operators.insert(":=", TType::ColonEquals);
  operators.insert("...", TType::Varargs);
  operators.insert("#", TType::Directive);
  operators.insert(".", TType::Dot);
  operators.insert("!", TType::LogicalNot);
  operators.insert("~", TType::Not);
  operators.insert("::", TType::DoubleColon);
  operators.insert("->", TType::Arrow);
  operators.insert("..", TType::Range);
  operators.insert("+", TType::Add);
  operators.insert("-", TType::Sub);
  operators.insert("*", TType::Mul);
  operators.insert("/", TType::Div);
  operators.insert("%", TType::Modulo);
  operators.insert("=", TType::Assign);
  operators.insert(",", TType::Comma);
  operators.insert(";", TType::Semi);
  operators.insert("(", TType::LParen);
  operators.insert(")", TType::RParen);
  operators.insert("{", TType::LCurly);
  operators.insert("}", TType::RCurly);
  operators.insert("|", TType::Or);
  operators.insert("&", TType::And);
  operators.insert("||", TType::LogicalOr);
  operators.insert("&&", TType::LogicalAnd);
  operators.insert("<<", TType::SHL);
  operators.insert("^", TType::Xor);
  operators.insert("<", TType::LT);
  operators.insert(">", TType::GT);
  operators.insert("==", TType::EQ);
  operators.insert("!=", TType::NEQ);
  operators.insert("<=", TType::LE);
  operators.insert(">=", TType::GE);
  operators.insert("[", TType::LBrace);
  operators.insert("]", TType::RBrace);
  operators.insert("++", TType::Increment);
  operators.insert("--", TType::Decrement);
  operators.insert("+=", TType::CompAdd);
  operators.insert("-=", TType::CompSub);
  operators.insert("*=", TType::CompMul);
  operators.insert("/=", TType::CompDiv);
  operators.insert("%=", TType::CompMod);
  operators.insert("&=", TType::CompAnd);
  operators.insert("|=", TType::CompOr);
  operators.insert("^=", TType::CompXor);
  operators.insert("<<=", TType::CompSHL);
  operators.insert(">>=", TType::CompSHR);
  operators.insert("!<", TType::GenericBrace);

}

get_reserved_words :: fn() -> List!<str> {
  return List!<str>::init(.["auto", "break", "case", "const", "default",  "do",
                            "double", "else", "enum", "extern", "float", "for", "goto",
                            "int", "long", "return", "short", "signed",
                            "struct", "typedef", "unsigned", "volatile"]);
}

State :: struct {
  input: String,
  path: String,
  pos: u64,
  col: u64,
  line: u64,
  file_idx: u64,
}

impl State {
  new :: fn(path: String, input: String, file_idx: u64) -> #self {
    return .{
      path: path,
      input: input,
      file_idx: file_idx,
      pos: 0,
      col: 1,
      line: 1,
    };
  }

  from_file :: fn!<Path>(filename: Path) -> #self where Path: AsByteSlice {
      canonical_option := canonical_path(filename);
      if canonical_option.is_none() {
        printlnf("file '%' was unable to be located.", (filename,));
      }
      canonical := canonical_option.unwrap();
      parent := parent_path(canonical).unwrap();
      change_directory(parent).unwrap();
      input := File::read_all(canonical).unwrap();

      mut found := false;
      mut file_idx := 0;
      for file in *SourceLocation::files() {
        if file == canonical {
          found = true;
          break;
        } 
        file_idx++;
      }
      if (!found) {
        SourceLocation::files().push(canonical);
      }
      return State::new(canonical, input, file_idx);
    }
}

Lexer :: struct {
  operators: Map!<str, TType>,
  keywords:  Map!<str, TType>,
  reserved:  List!<str>,
  states:    List!<State>,
  lookahead_buffer: List!<Token>,
}

impl Lexer {
  new :: fn() -> #self {
    mut self: #self;
    init_operator_and_keyword_maps(&mut self.operators, &mut self.keywords);
    self.reserved = get_reserved_words();
    return self;
  }
}

impl Lexer {
  push_state :: fn(*mut self, state: State) {
    self.states.push(state);
  }

  fill_buffer_if_needed :: fn(*mut self) {
    while self.lookahead_buffer.length < 8 {
      if self.states.is_empty() {
        self.lookahead_buffer.push(Token::Eof());
      } else {
        self.get_token(self.states.back_mut().unwrap());
        token := self.lookahead_buffer.back().unwrap();
        if token.type == TType::Eof {
          self.states.pop();
        }
      }
    }
  }

  expect :: fn(*mut self, type: TType) -> Token {
    token := self.eat();
    if token.type != type {
      throw_error(
        format("unexpected token: '%' ...\nexpected '%' instead.", 
          (token.type, type), FormatOptions::default()
        ),
        token.location
      );
    }
    return token;
  }

  peek :: fn(*mut self) -> Token {
    self.fill_buffer_if_needed();
    return self.lookahead_buffer.front().unwrap();
  }

  eat :: fn(*mut self) -> Token {
    self.fill_buffer_if_needed();
    return self.lookahead_buffer.pop_front();
  }

  get_token :: fn(*mut self, state: *mut State) {
    mut token_builder: StringBuilder;
    defer token_builder.deinit();
    
    while state.pos < state.input.length {
      token_builder.clear();
      mut c: u8 = state.input[state.pos];
      
      /* Newline */
      if c == '\n' {
        state.pos++;
        state.line++;
        state.col = 1;
        continue;
      }

      /* Whitespace */
      if c == ' ' || c == '\t' {
        state.pos++;
        state.col++;
        continue;
      }

      /* Line comments */
      if c == '/' && state.pos + 1 < state.input.length && state.input[state.pos + 1] == '/' {
        state.pos += 2;
        state.col += 2;
        while c != '\n' && state.pos < state.input.length {
          state.pos++;
          c = state.input[state.pos];
        }
        if state.pos < state.input.length {
          state.pos++;
          state.col = 1;
          state.line++;
        }
        continue;
      }

      /* Block comments */
      if c == '/' && state.pos + 1 < state.input.length && state.input[state.pos + 1] == '*' {
        state.pos += 2;
        state.col += 2;
        while state.pos + 1 < state.input.length && state.input[state.pos] != '*' || state.input[state.pos + 1] != '/' {
          if state.input[state.pos] == '\n' {
            state.line++;
            state.col = 1;
          } else {
            state.col++;
          }
          state.pos++;
          c = state.input[state.pos];
        }
        if state.pos < state.input.length {
          state.pos += 2;
          state.col += 2;
        }
        continue;
      }

      /* token-yielding symbols below. */
      mut location : SourceLocation = .{
        line: state.line, 
        column: state.col, 
        file: state.file_idx
      };

      // Characters.
      if c == '\'' {
        start := state.pos;
        state.pos++;
        state.col++;
        c = state.input[state.pos];
        mut codepoint: u32 = -1;

        // Escape characters.
        if c == '\\' {
          state.pos++;
          state.col++;
          c = state.input[state.pos];
          state.pos++;
          state.col++;
          if c == 'n' {
            codepoint = '\n';
          } else if c == 'v' {
            codepoint = '\v';
          } else if c == 'b' {
            codepoint = '\b';
          } else if c == 't' {
            codepoint = '\t';
          } else if c == 'f' {
            codepoint = '\f';
          } else if c == 'r' {
            codepoint = '\r';
          } else if c == '\'' {
            codepoint = '\'';
          } else if c == '\\' {
            codepoint = '\\';
          } else if c == '\"' {
            codepoint = '\"';
          } else if c == '0' {
            codepoint = '\0';
          } else if c == 'x' || c == 'u' || c == 'U' {
            mut num_digits: u64;
            if c == 'x' {
              num_digits = 2;
            } else if c == 'u' {
              num_digits = 4;
            } else {
              num_digits = 8;
            }
            state.pos++;
            state.col++;
            codepoint = 0;
            for i in 0..num_digits {
              if (state.pos >= state.input.length || !isxdigit(state.input[state.pos])) {
                throw_error("invalid hexadecimal escape sequence", location);
              }
              buffer: u8[2] = .[
                state.input[state.pos],
                '\0',
              ];
              mut hex_value: u8 = state.input[state.pos];
              if hex_value >= '0' && hex_value <= '9' {
                hex_value -= '0';
              } else if hex_value >= 'a' && hex_value <= 'f' {
                hex_value -= 'a' - 10;
              } else if hex_value >= 'A' && hex_value <= 'F' {
                hex_value -= 'A' - 10;
              }
              codepoint = (codepoint << 4) | hex_value;
              state.pos++;
              state.col++;
            }
          } else if c >= '0' && c <= '7' { // Octal escape sequence
            codepoint = 0;
            mut i := 0;
            while i < 3 && c > '0' && c < '7' {
              codepoint = (codepoint << 3) | (c - '0');
              state.pos++;
              state.col++;
              c = state.input[state.pos];
              ++i;
            }
          } else {
            throw_error(format("invalid escape sequence %", (c,), FormatOptions::default()), location);
          }
        } else if (c & 0x80) == 0 {
          codepoint = c;
          state.pos++;
          state.col++;
        } else {
          mut num_bytes := 0;
          if ((c & 0xE0) == 0xC0) {
            num_bytes = 2;
          }
          else if ((c & 0xF0) == 0xE0) {
            num_bytes = 3;
          }
          else if ((c & 0xF8) == 0xF0) {
            num_bytes = 4;
          }
          else {
            throw_error("invalid utf8 char", location);
          }

          for i in 0..num_bytes {
            if (state.pos >= state.input.length || (i > 0 && (state.input[state.pos] & 0xC0) != 0x80)) {
              throw_error("invalid UTF-8 continuation byte", location);
            }
            codepoint = (codepoint << 6) | (state.input[state.pos] & 0x3F);
            state.pos++;
            state.col++;
          }
        }

        c = state.input[state.pos];
        if (c != '\'') {
          throw_error(format("invalid char literal: too many characters %", (codepoint,), FormatOptions::default()), location);
        }
        state.pos++; // move past '
        state.col++;
        mut buffer: u8[32];
        snprintf(buffer, 32 * sizeof(u8), "0x%X"c, codepoint);
        self.lookahead_buffer.push(Token::new(location, String::from_ptr(buffer), TType::Char));
        return;
      }

      // Strings
      if c == '\"' {
        state.pos++;
        state.col++;
        c = state.input[state.pos];
        while (state.pos < state.input.length) {
          c = state.input[state.pos];
          if (c == '\"') {
            break;
          } if (c == '\n') {
            throw_error("You can't directly embed a '\\n' in string by just letting it span multiple lines", location);
          } else if (c == '\\') {
            if (state.pos + 1 < state.input.length) {
              token_builder.append_byte(c);
              state.pos++;
              state.col++;
              token_builder.append_byte(state.input[state.pos]);
              state.pos++;
              state.col++;
            } else {
              throw_error("incomplete escape sequence at end of input", location);
            }
          } else {
            token_builder.append_byte(c);
            state.pos++;
            state.col++;
            c = state.input[state.pos];
          }
        }
        if c != '\"' {
          panic("unescaped string");
        }
        state.pos++;
        state.col++;
        self.lookahead_buffer.push(Token::new(location, token_builder.get_string(), TType::String));
        return;
      }

      // Identifiers, Keywords.
      // Check if the character is alphabetic, underscore, or a UTF-8 start byte
      if (isalpha(c) || c == '_' || (c & 0x80) != 0) { 
        while (state.pos < state.input.length) {
          if (isalnum(c) || c == '_') {
            token_builder.append_byte(c);
            state.pos++;
            state.col++;
            c = state.input[state.pos];
          // Check if the character is a UTF-8 start byte
          } else if ((c & 0x80) != 0) { 
            mut num_bytes := 0;
            if (c & 0xE0) == 0xC0 {
              num_bytes = 2;
            } else if (c & 0xF0) == 0xE0 {
              num_bytes = 3;
            } else if (c & 0xF8) == 0xF0 {
              num_bytes = 4;
            } else { 
              // Stop processing if it's not a valid UTF-8 start byte
              break; 
            } 
            for i in 0..num_bytes {
              if (state.pos >= state.input.length || (i > 0 && (state.input[state.pos] & 0xC0) != 0x80)) {
                break; // Stop processing if it's not a valid UTF-8 continuation byte
              }
              token_builder.append_byte(state.input[state.pos]);
              state.pos++;
              state.col++;
            }
            c = state.input[state.pos];
          } else {
            break; // Stop processing if it's not a valid identifier character
          }
        }

        mut value := token_builder.get_string();
        if self.keywords.contains(value.as_str()) {
          self.lookahead_buffer.push(Token::new(location, value, self.keywords.get(value.as_str()).unwrap()));
          return;
        } else if self.reserved.contains(value.as_str(), fn (a: str, b: str) -> bool {
          return a == b;
        }) {
          // we prepend a $ on C's reserved words so we don't have any invisible overlap between the source
          // and target language.s
          mut new_value := String::from("$");
          new_value.append(value);
          value.deinit();
          value = new_value;
        }
        self.lookahead_buffer.push(Token::new(location, value, TType::Identifier));
        return;
      } 

      // Operators and Punctuation.
      if ispunct(c) {
        mut longest_match: String = .{};
        mut current_match: String = .{};
        while state.pos < state.input.length && ispunct(c) {
          if c == '\"'
            then break;

          current_match.push(state.input[state.pos]);
          option := self.operators.get(current_match.as_str());

          if (option.is_some()) {
            longest_match = current_match;
          } else if !longest_match.is_empty() {
            self.lookahead_buffer.push(Token::new(location, longest_match, self.operators.get(longest_match.as_str()).unwrap()));
            return;
          }
          
          state.pos++;
          state.col++;
          c = state.input[state.pos];
        }

        if !longest_match.is_empty() {
          self.lookahead_buffer.push(Token::new(location, longest_match, self.operators.get(longest_match.as_str()).unwrap()));
          return;
        } else {
          throw_error(format("unable to lex operator :: \'%\'", (current_match,), FormatOptions::default()), location);
        }
      }

      if isdigit(c) {
        mut is_float: bool = false;
        mut is_hex: bool = false;
        mut is_bin: bool = false;
        if c == '0' && (state.input[state.pos + 1] == 'x' || state.input[state.pos + 1] == 'X') {
          is_hex = true;
          state.pos += 2; // Skip '0x'
          state.col += 2;
          c = state.input[state.pos];
        } else if c == '0' && (state.input[state.pos + 1] == 'b' || state.input[state.pos + 1] == 'B') {
          is_bin = true;
          state.pos += 2; // Skip '0b'
          state.col += 2;
          c = state.input[state.pos];
        }

        while state.pos < state.input.length && (isdigit(c) || c == '.' || (is_hex && isxdigit(c)) ||
                            (is_bin && (c == '0' || c == '1')) || c == '_') {
          if (c == '_') {
            state.pos++;
            state.col++;
            c = state.input[state.pos];
          }

          if (c == '.' && state.pos + 1 < state.input.length && (state.input[state.pos + 1] == '.' || !isdigit(state.input[state.pos+1]))) {
            break;
          }
          
          if (c == '.') {
            if (is_float) {
              throw_error("got too many '.' periods in a float literal.", location);
            }
            is_float = true;
          }
          token_builder.append_byte(c);
          state.pos++;
          state.col++;
          c = state.input[state.pos];
          if (c == '_') {
            state.pos++;
            state.col++;
            c = state.input[state.pos];
          }
        }

        mut value := token_builder.get_string();

        if (is_hex) {
          mut hex := String::from("0x");
          hex.append_then_free(value);
          self.lookahead_buffer.push(Token::new(location, hex, TType::Integer));
        } else if (is_bin) {
          mut bin := String::from("0b");
          bin.append_then_free(value);
          self.lookahead_buffer.push(Token::new(location, bin, TType::Integer));
        } else if (!is_float) {
          self.lookahead_buffer.push(Token::new(location, value, TType::Integer));
        } else {
          self.lookahead_buffer.push(Token::new(location, value, TType::Float));
        }
        return;
      }

    }

    self.lookahead_buffer.push(Token::Eof());
  }
}
