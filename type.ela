import core::*;

alias Type :: *mut TypeDescriptor;

ConversionType :: enum {
  Prohibited,
  NoneNeeded,
  Implicit,
  Explicit,
}

ScalarTag :: enum {
  Void,
  S8,
  S16,
  S32,
  S64,
  U8,
  U16,
  U32,
  U64,
  Float,
  Double,
  String,
  Char,
  Bool,
}

TypeTag :: enum {
  Scalar,
  Function,
  Struct,
  Enum,
  Tuple,
  TaggedUnion,
  Interface,
}

TypeModifierTag :: enum {
  PointerConst,
  PointerMut,
  Array,
}

TypeModifier :: struct {
  tag: TypeModifierTag,
  array_size: u64,
}

impl TypeModifier {
  ptr_mut :: fn() -> #self {
    return .{
      tag: TypeModifierTag::PointerMut,
    }
  }
  ptr_const :: fn() -> #self {
    return .{
      tag: TypeModifierTag::PointerConst,
    }
  }
  array :: fn(size: u64) -> #self {
    return .{
      tag: TypeModifierTag::Array,
      array_size: size,
    }
  }
}

// TODO: actually implement this back in the AST.
StmtTypeDeclaration :: struct {};

IsTypeInfo :: interface {}

InterfaceTypeInfo :: struct {
  methods: List!<(InternedString, Type)>,
}

FunctionTypeInfo :: struct {
  parameters: List!<Type>,
  return_type: Type,
  is_varargs: bool,
}

ScalarTypeInfo :: struct {
  tag: ScalarTag,
  is_integral: bool,
  size: u64,
}

EnumTypeInfo :: struct {
  element_type: Type,
  is_flags: bool,
}

StructTypeInfo :: struct {
  is_forward_declared: bool,
  is_anonymous: bool,
  is_union: bool,
}

TupleTypeInfo :: struct {
  subtypes: List!<Type>,
}

impl IsTypeInfo for InterfaceTypeInfo {}
impl IsTypeInfo for FunctionTypeInfo {}
impl IsTypeInfo for ScalarTypeInfo {}
impl IsTypeInfo for EnumTypeInfo {}
impl IsTypeInfo for StructTypeInfo {}
impl IsTypeInfo for TupleTypeInfo {}

TypeDescriptor :: struct {
  modifiers:     List!<TypeModifier>,
  generic_args:  List!<Type>,
  interfaces:    List!<Type>,
  declaring_node: Option!<StmtTypeDeclaration>,
  base_type: Option!<Type>,
  generic_base_type: Type,
  basename: InternedString,
  tag: TypeTag,

  #anon :: union {
    interface_info: InterfaceTypeInfo,
    function_info:  FunctionTypeInfo,
    scalar_info:    ScalarTypeInfo,
    enum_info:      EnumTypeInfo,
    struct_info:    StructTypeInfo,
    tuple_info:     TupleTypeInfo,
  }
}

impl Format for TypeDescriptor {
  format :: fn(*const self, builder: *mut StringBuilder, options: FormatOptions) {
    builder.append("Type {\n");
    builder.appendf("  modifiers: %,\n", (self.modifiers,), options);
    builder.appendf("  generic_args: %,\n", (self.generic_args,), options);
    builder.appendf("  interfaces: %,\n", (self.interfaces,), options);
    builder.appendf("  declaring node: %,\n", (self.declaring_node,), options);
    builder.appendf("  base type: %,\n", (self.base_type,), options);
    builder.appendf("  generic base: %,\n", (self.generic_base_type,), options);
    builder.appendf("  basename: %,\n", (self.basename,), options);
    builder.appendf("  tag: %,\n", (self.tag,), options);
    switch self.tag {
      TypeTag::Scalar:    {     builder.appendf("  info: %,\n", (self.scalar_info,), options); }
      TypeTag::Function:  {   builder.appendf("  info: %,\n", (self.function_info,), options); }
      TypeTag::Struct:    {     builder.appendf("  info: %,\n", (self.struct_info,), options); }
      TypeTag::Enum:      {       builder.appendf("  info: %,\n", (self.enum_info,), options); }
      TypeTag::Tuple:     {      builder.appendf("  info: %,\n", (self.tuple_info,), options); }
      TypeTag::Interface: {  builder.appendf("  info: %,\n", (self.interface_info,), options); }
    }
    builder.append("}");
  }
}

mut global_type_table: List!<Type>;

global_create_type :: fn!<TypeInfo>(
  tag: TypeTag,
  basename: InternedString, 
  type_info: TypeInfo, 
  modifiers: TypeModifier[], 
  base_type: Type) -> Type where TypeInfo: IsTypeInfo {

  mut descriptor : TypeDescriptor = .{
    tag: tag,
    basename: basename,
    modifiers: modifiers,
    base_type: Some(base_type),
  };

  switch typeof(TypeInfo) {
    typeof(InterfaceTypeInfo): {
      memcpy(&mut descriptor.interface_info, &const type_info, sizeof(TypeInfo));
    }
    typeof(FunctionTypeInfo): {
      memcpy(&mut descriptor.function_info, &const type_info, sizeof(TypeInfo));
    }
    typeof(ScalarTypeInfo): {
      memcpy(&mut descriptor.scalar_info, &const type_info, sizeof(TypeInfo));
    }
    typeof(EnumTypeInfo): {
      memcpy(&mut descriptor.enum_info, &const type_info, sizeof(TypeInfo));
    }
    typeof(StructTypeInfo): {
      memcpy(&mut descriptor.struct_info, &const type_info, sizeof(TypeInfo));
    }
    typeof(TupleTypeInfo): {
      memcpy(&mut descriptor.tuple_info, &const type_info, sizeof(TypeInfo));
    }
  }
  type : Type = new(descriptor);
  global_type_table.push(type);
  return type;
}
